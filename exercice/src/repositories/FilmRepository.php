<?php
// Pensez √† d√©finir le namespace du fichier.

use src\Models\Database;
use src\Models\Film;
// Pensez √©galement √† ajouter tous les use n√©cessaires !

class FilmRepository {
  private $DB;

  public function __construct()
  {
    $database = new Database;
    $this->DB = $database->getDB();
    
    require_once __DIR__ . '/../../config.php';
  }

  // Exemple d'une requ√™te avec query :
  // il n'y a pas de risques, car aucun param√®tre venant de l'ext√©rieur n'est demand√© dans le sql.
  public function getAllFilms(){
    $sql = "SELECT * FROM ".PREFIXE."films;";

    $retour = $this->DB->query($sql)->fetchAll(PDO::FETCH_CLASS, Film::class);

    return $retour;
  }


  /**
   * Exemple d'une requ√™te pr√©par√©e, avec prepare, bindParam et execute :
   * - prepare : permet d'√©crire la requ√™te sql, en rempla√ßant les nom des variables par :variable.
   * Il est aussi possible de mettre un '?', mais c'est moins lisible, surtout quand on a beaucoup de param√®tres √† passer.
   * - bindParam : permet d'associer un :variable avec la vraie variable.
   * - execute : permet d'ex√©cuter le sql complet. 
   * 
   * L'id est un param√®tre donn√© par le code, il y a un risque d'alt√©ration de la donn√©e.
   * Pour √©viter des injections on pr√©pare (on d√©samorce) la requ√™te.
   */

  public function getThisFilmById(int $id): Film {
    $sql = "SELECT * FROM ".PREFIXE."films WHERE id = :id";

    $statement = $this->DB->prepare($sql);
    $statement->bindParam(':id', $id);
    $statement->execute();
    $statement->setFetchMode(PDO::FETCH_CLASS, Film::class);
    $retour = $statement->fetch();

    return $retour;
  }

  /**
   * Un autre exemple d'une requ√™te pr√©par√©e, avec prepare et execute :
   * Cette fois-ci on donne les param√®tres tout de suite lors du execute, sous forme d'un tableau associatif.
   */
  public function getThoseFilmsByClassificationAge(int $Id_Classification): array {
    $sql = "SELECT * FROM ".PREFIXE."films WHERE ID_CLASSIFICATION_AGE_PUBLIC = :Id_Classification";

    $statement = $this->DB->prepare($sql);
    
    $statement->execute([':Id_Classification'=> $Id_Classification]);
    $statement->setFetchMode(PDO::FETCH_CLASS, Film::class);
    $retour = $statement->fetchAll();

    return $retour;
  }


  // Construire la m√©thode getThoseFilmsByName() Et oui, parce qu'on peut avoir plusieurs films avec le m√™me nom !
  // Bien penser √† pr√©fixer vos tables üòâ

  // Construire la m√©thode CreateThisFilm()
  // Cette m√©thode retournera le film cr√©√©, en lui int√©grant l'ID (qu'on avait pas jusque l√†, puisque c'est la base de donn√©es qui le fournit).


  // Construire la m√©thode updateThisFilm()
  // Retournera true ou false

  // Construire la m√©thode deleteThisFilm()
  // Retournera true ou false

  // Construire une m√©thode addFilmToCategories(Film $film)
  // Elle permettra d'ins√©rer autant de lignes que n√©cessaire (un film peut √™tre associ√© √† plusieurs cat√©gories)
  // dans la table relations_films_categories
  // Retournera true ou false

  // Construire une m√©thode removeFilmToCategories(Film $film)
  // qui permettra de supprimer toutes les cat√©gories associ√©es √† un film dans la table relations_films_categories
  // Retournera true ou false
  
  // PARTIE 4 : Exercice 2
  // Construire une m√©thode concatenationRequete()
  // Qui prendra en param√®tre la seule ligne de sql qui change dans tous vos getters
  // et qui concat√®ne le code pour le factoriser.

  // Pensez √† remplacer avec cette m√©thode partout o√π c'est utile.

}